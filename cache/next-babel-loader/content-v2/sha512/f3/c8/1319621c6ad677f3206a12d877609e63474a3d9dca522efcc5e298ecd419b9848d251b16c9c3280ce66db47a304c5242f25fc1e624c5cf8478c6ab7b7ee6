{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nexport const alertService = {\n  onAlert,\n  success,\n  error,\n  info,\n  warn,\n  alert,\n  clear\n};\nexport const AlertType = {\n  Success: 'Success',\n  Error: 'Error',\n  Info: 'Info',\n  Warning: 'Warning'\n};\nconst alertSubject = new Subject();\nconst defaultId = 'default-alert'; // enable subscribing to alerts observable\n\nfunction onAlert(id = defaultId) {\n  return alertSubject.asObservable().pipe(filter(x => x && x.id === id));\n} // convenience methods\n\n\nfunction success(message, options) {\n  alert(_objectSpread(_objectSpread({}, options), {}, {\n    type: AlertType.Success,\n    message\n  }));\n}\n\nfunction error(message, options) {\n  alert(_objectSpread(_objectSpread({}, options), {}, {\n    type: AlertType.Error,\n    message\n  }));\n}\n\nfunction info(message, options) {\n  alert(_objectSpread(_objectSpread({}, options), {}, {\n    type: AlertType.Info,\n    message\n  }));\n}\n\nfunction warn(message, options) {\n  alert(_objectSpread(_objectSpread({}, options), {}, {\n    type: AlertType.Warning,\n    message\n  }));\n} // core alert method\n\n\nfunction alert(alert) {\n  alert.id = alert.id || defaultId;\n  alert.autoClose = alert.autoClose === undefined ? true : alert.autoClose;\n  alertSubject.next(alert);\n} // clear alerts\n\n\nfunction clear(id = defaultId) {\n  alertSubject.next({\n    id\n  });\n}","map":null,"metadata":{},"sourceType":"module"}