{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useRouter } from 'next/router';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { Link } from 'components';\nimport { userService, alertService } from 'services';\nexport { AddEdit };\n\nfunction AddEdit(props) {\n  var _errors$title, _errors$firstName, _errors$lastName, _errors$email, _errors$role, _errors$password, _errors$confirmPasswo;\n\n  const user = props === null || props === void 0 ? void 0 : props.user;\n  const isAddMode = !user;\n  const router = useRouter();\n  const {\n    0: showPassword,\n    1: setShowPassword\n  } = useState(false); // form validation rules \n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required('Title is required'),\n    firstName: Yup.string().required('First Name is required'),\n    lastName: Yup.string().required('Last Name is required'),\n    email: Yup.string().email('Email is invalid').required('Email is required'),\n    role: Yup.string().required('Role is required'),\n    password: Yup.string().transform(x => x === '' ? undefined : x).concat(isAddMode ? Yup.string().required('Password is required') : null).min(6, 'Password must be at least 6 characters'),\n    confirmPassword: Yup.string().transform(x => x === '' ? undefined : x).when('password', (password, schema) => {\n      if (password || isAddMode) return schema.required('Confirm Password is required');\n    }).oneOf([Yup.ref('password')], 'Passwords must match')\n  });\n  const formOptions = {\n    resolver: yupResolver(validationSchema)\n  }; // set default form values if in edit mode\n\n  if (!isAddMode) {\n    const {\n      password,\n      confirmPassword\n    } = user,\n          defaultValues = _objectWithoutProperties(user, [\"password\", \"confirmPassword\"]);\n\n    formOptions.defaultValues = defaultValues;\n  } // get functions to build form with useForm() hook\n\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState\n  } = useForm(formOptions);\n  const {\n    errors\n  } = formState;\n\n  function onSubmit(data) {\n    return isAddMode ? createUser(data) : updateUser(user.id, data);\n  }\n\n  function createUser(data) {\n    return userService.create(data).then(() => {\n      alertService.success('User added', {\n        keepAfterRouteChange: true\n      });\n      router.push('.');\n    }).catch(alertService.error);\n  }\n\n  function updateUser(id, data) {\n    return userService.update(id, data).then(() => {\n      alertService.success('User updated', {\n        keepAfterRouteChange: true\n      });\n      router.push('..');\n    }).catch(alertService.error);\n  }\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      children: isAddMode ? 'Add User' : 'Edit User'\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"form-row\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-group col\",\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          children: \"Title\"\n        }), /*#__PURE__*/_jsxs(\"select\", _objectSpread(_objectSpread({\n          name: \"title\"\n        }, register('title')), {}, {\n          className: `form-control ${errors.title ? 'is-invalid' : ''}`,\n          children: [/*#__PURE__*/_jsx(\"option\", {\n            value: \"\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"Mr\",\n            children: \"Mr\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"Mrs\",\n            children: \"Mrs\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"Miss\",\n            children: \"Miss\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"Ms\",\n            children: \"Ms\"\n          })]\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-group col-5\",\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          children: \"First Name\"\n        }), /*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({\n          name: \"firstName\",\n          type: \"text\"\n        }, register('firstName')), {}, {\n          className: `form-control ${errors.firstName ? 'is-invalid' : ''}`\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$firstName = errors.firstName) === null || _errors$firstName === void 0 ? void 0 : _errors$firstName.message\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-group col-5\",\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          children: \"Last Name\"\n        }), /*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({\n          name: \"lastName\",\n          type: \"text\"\n        }, register('lastName')), {}, {\n          className: `form-control ${errors.lastName ? 'is-invalid' : ''}`\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$lastName = errors.lastName) === null || _errors$lastName === void 0 ? void 0 : _errors$lastName.message\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"form-row\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-group col-7\",\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          children: \"Email\"\n        }), /*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({\n          name: \"email\",\n          type: \"text\"\n        }, register('email')), {}, {\n          className: `form-control ${errors.email ? 'is-invalid' : ''}`\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-group col\",\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          children: \"Role\"\n        }), /*#__PURE__*/_jsxs(\"select\", _objectSpread(_objectSpread({\n          name: \"role\"\n        }, register('role')), {}, {\n          className: `form-control ${errors.role ? 'is-invalid' : ''}`,\n          children: [/*#__PURE__*/_jsx(\"option\", {\n            value: \"\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"User\",\n            children: \"User\"\n          }), /*#__PURE__*/_jsx(\"option\", {\n            value: \"Admin\",\n            children: \"Admin\"\n          })]\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$role = errors.role) === null || _errors$role === void 0 ? void 0 : _errors$role.message\n        })]\n      })]\n    }), !isAddMode && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        className: \"pt-3\",\n        children: \"Change Password\"\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: \"Leave blank to keep the same password\"\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"form-row\",\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-group col\",\n        children: [/*#__PURE__*/_jsxs(\"label\", {\n          children: [\"Password\", !isAddMode && (!showPassword ? /*#__PURE__*/_jsxs(\"span\", {\n            children: [\" - \", /*#__PURE__*/_jsx(\"a\", {\n              onClick: () => setShowPassword(!showPassword),\n              className: \"text-primary\",\n              children: \"Show\"\n            })]\n          }) : /*#__PURE__*/_jsxs(\"em\", {\n            children: [\" - \", user.password]\n          }))]\n        }), /*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({\n          name: \"password\",\n          type: \"password\"\n        }, register('password')), {}, {\n          className: `form-control ${errors.password ? 'is-invalid' : ''}`\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"form-group col\",\n        children: [/*#__PURE__*/_jsx(\"label\", {\n          children: \"Confirm Password\"\n        }), /*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({\n          name: \"confirmPassword\",\n          type: \"password\"\n        }, register('confirmPassword')), {}, {\n          className: `form-control ${errors.confirmPassword ? 'is-invalid' : ''}`\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: \"invalid-feedback\",\n          children: (_errors$confirmPasswo = errors.confirmPassword) === null || _errors$confirmPasswo === void 0 ? void 0 : _errors$confirmPasswo.message\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxs(\"button\", {\n        type: \"submit\",\n        disabled: formState.isSubmitting,\n        className: \"btn btn-primary mr-2\",\n        children: [formState.isSubmitting && /*#__PURE__*/_jsx(\"span\", {\n          className: \"spinner-border spinner-border-sm mr-1\"\n        }), \"Save\"]\n      }), /*#__PURE__*/_jsx(\"button\", {\n        onClick: () => reset(formOptions.defaultValues),\n        type: \"button\",\n        disabled: formState.isSubmitting,\n        className: \"btn btn-secondary\",\n        children: \"Reset\"\n      }), /*#__PURE__*/_jsx(Link, {\n        href: \"/users\",\n        className: \"btn btn-link\",\n        children: \"Cancel\"\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}