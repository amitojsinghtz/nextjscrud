{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/home/runner/work/nextjscrud/nextjscrud/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/runner/work/nextjscrud/nextjscrud/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { alertService, AlertType } from 'services';\nexport { Alert };\nAlert.defaultProps = {\n  id: 'default-alert',\n  fade: true\n};\n\nfunction Alert(_ref) {\n  var id = _ref.id,\n      fade = _ref.fade;\n  var router = useRouter();\n\n  var _useState = useState([]),\n      alerts = _useState[0],\n      setAlerts = _useState[1];\n\n  useEffect(function () {\n    // subscribe to new alert notifications\n    var subscription = alertService.onAlert(id).subscribe(function (alert) {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        setAlerts(function (alerts) {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          var filteredAlerts = alerts.filter(function (x) {\n            return x.keepAfterRouteChange;\n          }); // remove 'keepAfterRouteChange' flag on the rest\n\n          filteredAlerts.forEach(function (x) {\n            return delete x.keepAfterRouteChange;\n          });\n          return filteredAlerts;\n        });\n      } else {\n        // add alert to array\n        setAlerts(function (alerts) {\n          return [].concat(_toConsumableArray(alerts), [alert]);\n        }); // auto close alert if required\n\n        if (alert.autoClose) {\n          setTimeout(function () {\n            return removeAlert(alert);\n          }, 3000);\n        }\n      }\n    }); // clear alerts on location change\n\n    var onRouteChange = function onRouteChange() {\n      return alertService.clear(id);\n    };\n\n    router.events.on('routeChangeStart', onRouteChange); // clean up function that runs when the component unmounts\n\n    return function () {\n      // unsubscribe to avoid memory leaks\n      subscription.unsubscribe();\n      router.events.off('routeChangeStart', onRouteChange);\n    };\n  }, []);\n\n  function removeAlert(alert) {\n    if (fade) {\n      // fade out alert\n      var alertWithFade = _objectSpread(_objectSpread({}, alert), {}, {\n        fade: true\n      });\n\n      setAlerts(function (alerts) {\n        return alerts.map(function (x) {\n          return x === alert ? alertWithFade : x;\n        });\n      }); // remove alert after faded out\n\n      setTimeout(function () {\n        setAlerts(function (alerts) {\n          return alerts.filter(function (x) {\n            return x !== alertWithFade;\n          });\n        });\n      }, 250);\n    } else {\n      // remove alert\n      setAlerts(function (alerts) {\n        return alerts.filter(function (x) {\n          return x !== alert;\n        });\n      });\n    }\n  }\n\n  function cssClasses(alert) {\n    var _alertTypeClass;\n\n    if (!alert) return;\n    var classes = ['alert', 'alert-dismissable'];\n    var alertTypeClass = (_alertTypeClass = {}, _defineProperty(_alertTypeClass, AlertType.Success, 'alert-success'), _defineProperty(_alertTypeClass, AlertType.Error, 'alert-danger'), _defineProperty(_alertTypeClass, AlertType.Info, 'alert-info'), _defineProperty(_alertTypeClass, AlertType.Warning, 'alert-warning'), _alertTypeClass);\n    classes.push(alertTypeClass[alert.type]);\n\n    if (alert.fade) {\n      classes.push('fade');\n    }\n\n    return classes.join(' ');\n  }\n\n  if (!alerts.length) return null;\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"m-3\",\n      children: alerts.map(function (alert, index) {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          className: cssClasses(alert),\n          children: [/*#__PURE__*/_jsx(\"a\", {\n            className: \"close\",\n            onClick: function onClick() {\n              return removeAlert(alert);\n            },\n            children: \"\\xD7\"\n          }), /*#__PURE__*/_jsx(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: alert.message\n            }\n          })]\n        }, index);\n      })\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}