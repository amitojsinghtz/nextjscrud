{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { alertService, AlertType } from 'services';\nexport { Alert };\nAlert.defaultProps = {\n  id: 'default-alert',\n  fade: true\n};\n\nfunction Alert({\n  id,\n  fade\n}) {\n  const router = useRouter();\n  const {\n    0: alerts,\n    1: setAlerts\n  } = useState([]);\n  useEffect(() => {\n    // subscribe to new alert notifications\n    const subscription = alertService.onAlert(id).subscribe(alert => {\n      // clear alerts when an empty alert is received\n      if (!alert.message) {\n        setAlerts(alerts => {\n          // filter out alerts without 'keepAfterRouteChange' flag\n          const filteredAlerts = alerts.filter(x => x.keepAfterRouteChange); // remove 'keepAfterRouteChange' flag on the rest\n\n          filteredAlerts.forEach(x => delete x.keepAfterRouteChange);\n          return filteredAlerts;\n        });\n      } else {\n        // add alert to array\n        setAlerts(alerts => [...alerts, alert]); // auto close alert if required\n\n        if (alert.autoClose) {\n          setTimeout(() => removeAlert(alert), 3000);\n        }\n      }\n    }); // clear alerts on location change\n\n    const onRouteChange = () => alertService.clear(id);\n\n    router.events.on('routeChangeStart', onRouteChange); // clean up function that runs when the component unmounts\n\n    return () => {\n      // unsubscribe to avoid memory leaks\n      subscription.unsubscribe();\n      router.events.off('routeChangeStart', onRouteChange);\n    };\n  }, []);\n\n  function removeAlert(alert) {\n    if (fade) {\n      // fade out alert\n      const alertWithFade = _objectSpread(_objectSpread({}, alert), {}, {\n        fade: true\n      });\n\n      setAlerts(alerts => alerts.map(x => x === alert ? alertWithFade : x)); // remove alert after faded out\n\n      setTimeout(() => {\n        setAlerts(alerts => alerts.filter(x => x !== alertWithFade));\n      }, 250);\n    } else {\n      // remove alert\n      setAlerts(alerts => alerts.filter(x => x !== alert));\n    }\n  }\n\n  function cssClasses(alert) {\n    if (!alert) return;\n    const classes = ['alert', 'alert-dismissable'];\n    const alertTypeClass = {\n      [AlertType.Success]: 'alert-success',\n      [AlertType.Error]: 'alert-danger',\n      [AlertType.Info]: 'alert-info',\n      [AlertType.Warning]: 'alert-warning'\n    };\n    classes.push(alertTypeClass[alert.type]);\n\n    if (alert.fade) {\n      classes.push('fade');\n    }\n\n    return classes.join(' ');\n  }\n\n  if (!alerts.length) return null;\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"m-3\",\n      children: alerts.map((alert, index) => /*#__PURE__*/_jsxs(\"div\", {\n        className: cssClasses(alert),\n        children: [/*#__PURE__*/_jsx(\"a\", {\n          className: \"close\",\n          onClick: () => removeAlert(alert),\n          children: \"\\xD7\"\n        }), /*#__PURE__*/_jsx(\"span\", {\n          dangerouslySetInnerHTML: {\n            __html: alert.message\n          }\n        })]\n      }, index))\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}