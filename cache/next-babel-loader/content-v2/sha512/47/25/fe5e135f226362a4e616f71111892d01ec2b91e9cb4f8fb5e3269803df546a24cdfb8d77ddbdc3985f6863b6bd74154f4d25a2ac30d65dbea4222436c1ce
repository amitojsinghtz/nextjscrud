{"ast":null,"code":"const fs = require('fs');\n\nlet users = require('data/users.json');\n\nexport const usersRepo = {\n  getAll,\n  getById,\n  create,\n  update,\n  delete: _delete\n};\n\nfunction getAll() {\n  return users;\n}\n\nfunction getById(id) {\n  return users.find(x => x.id.toString() === id.toString());\n}\n\nfunction create({\n  title,\n  firstName,\n  lastName,\n  email,\n  role,\n  password\n}) {\n  const user = {\n    title,\n    firstName,\n    lastName,\n    email,\n    role,\n    password\n  }; // validate\n\n  if (users.find(x => x.email === user.email)) throw `User with the email ${user.email} already exists`; // generate new user id\n\n  user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1; // set date created and updated\n\n  user.dateCreated = new Date().toISOString();\n  user.dateUpdated = new Date().toISOString(); // add and save user\n\n  users.push(user);\n  saveData();\n}\n\nfunction update(id, {\n  title,\n  firstName,\n  lastName,\n  email,\n  role,\n  password\n}) {\n  const params = {\n    title,\n    firstName,\n    lastName,\n    email,\n    role,\n    password\n  };\n  const user = users.find(x => x.id.toString() === id.toString()); // validate\n\n  if (params.email !== user.email && users.find(x => x.email === params.email)) throw `User with the email ${params.email} already exists`; // only update password if entered\n\n  if (!params.password) {\n    delete params.password;\n  } // set date updated\n\n\n  user.dateUpdated = new Date().toISOString(); // update and save\n\n  Object.assign(user, params);\n  saveData();\n} // prefixed with underscore '_' because 'delete' is a reserved word in javascript\n\n\nfunction _delete(id) {\n  // filter out deleted user and save\n  users = users.filter(x => x.id.toString() !== id.toString());\n  saveData();\n} // private helper functions\n\n\nfunction saveData() {\n  fs.writeFileSync('data/users.json', JSON.stringify(users, null, 4));\n}","map":null,"metadata":{},"sourceType":"module"}